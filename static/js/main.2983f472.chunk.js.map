{"version":3,"sources":["server/firebase.js","components/SideBar/UserInfo/Userinfo.component.jsx","store/actioncreator.js","store/actiontypes.js","components/SideBar/Notification/Notification.component.jsx","components/SideBar/Channels/Channels.component.jsx","components/SideBar/PrivateChat/PrivateChat.component.jsx","components/SideBar/FavouriteChannels/FavouriteChannels.component.jsx","components/SideBar/SideBar.component.jsx","components/Messages/MessageHeader/MessageHeader.component.jsx","components/Messages/MessageContent/MessageContent.component.jsx","components/Messages/ImageUpload/ImageUpload.component.jsx","components/Messages/MessageInput/MessageInput.component.jsx","components/Messages/Messages.component.jsx","components/Ads/Ads.component.jsx","App.js","serviceWorker.js","components/Auth/Register/Register.component.jsx","components/Auth/Login/Login.component.jsx","store/reducer.js","components/AppLoader/AppLoader.component.jsx","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","connect","state","user","currentUser","props","signOut","auth","then","console","log","Grid","Column","Row","className","Header","inverted","as","Icon","name","Content","Dropdown","trigger","Image","src","photoURL","avatar","displayName","options","key","text","onClick","setChannel","channel","type","payload","currentChannel","Notification","messagesRef","database","ref","usersRef","useState","channelsVisitedState","setChannelsVisitedState","messagesTimeStampState","setMessagesTimeStampState","useEffect","child","uid","on","snap","val","messages","channelsId","Object","keys","messagesTimeStamp","forEach","channelId","reduce","agg","item","push","timestamp","id","lastVisited","channelMessagesTimeStamp","notificationCount","filter","length","Label","color","calculateNotificationCount","notificationChannelId","dispatch","selectChannel","modalOpenState","setModalOpenState","description","channelAddState","setChannelAddState","isLoadingState","setLoadingState","channelsState","setChannelsState","channelsRef","currentState","updatedState","off","closeModal","setLastVisited","set","ServerValue","TIMESTAMP","onDisconnect","onSubmit","created_by","update","catch","err","handleInput","e","target","value","Menu","style","marginTop","Item","fontSize","map","active","isFavourite","displayChannels","Modal","open","onClose","Form","Segment","stacked","Input","onChange","placeholder","Actions","Button","loading","usersState","setUsersState","connectedUsersState","setConnectedUsersState","connectedRef","statusRef","isPrivateChat","userStatusRef","remove","index","indexOf","splice","selectUser","userTemp","generateChannelId","userId","displayUsers","favouriteChannels","favouriteChannel","SideBar","vertical","fixed","borderless","size","MessageHeader","clearing","floated","fluid","channelName","starChange","starred","Subheader","uniqueUsers","icon","searchTermChange","TimeAgo","locale","en","timeAgo","MessageContent","Comment","Avatar","message","ownMessage","Author","Metadata","format","image","onLoad","imageLoaded","Text","content","ImageUpload","fileState","setFileState","acceptedTypes","basic","file","files","label","includes","mime","lookup","uploadImage","messageRef","storageRef","storage","messageState","setMessageState","fileDialogState","setFileDialog","sendMessage","downloadUrl","createMessageInfo","labelPosition","contentType","filePath","uuidv4","put","data","getDownloadURL","url","setfavouriteChannel","removefavouriteChannel","messagesState","setMessagesState","searchTermState","setSearchTermState","divRef","useRef","scrollIntoView","behavior","filterMessageBySearchTerm","regex","RegExp","acc","match","isStarred","favouriteRef","Group","messagesToDisplay","displayMessages","currentEl","Ads","App","paddingLeft","Boolean","window","location","hostname","Register","userCollectionRef","userName","email","password","confirmpassword","userState","setuserState","errorState","seterrorState","isLoading","setIsLoading","isSuccess","setIsSuccess","event","currentuser","isFormEmpty","checkPassword","error","concat","updateuserDetails","createdUser","updateProfile","saveUserInDB","serverError","verticalAlign","textAlign","maxWidth","createUserWithEmailAndPassword","iconPosition","disabled","Message","success","to","Login","signInWithEmailAndPassword","defaultUserState","defaultChannelState","defaultFavouriteChannelState","combinedReducers","combineReducers","action","AppLoader","Dimmer","Loader","store","createStore","IndexWithRouter","withRouter","setUser","onAuthStateChanged","history","pathname","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2983f472.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport 'firebase/database';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDw1_vkCNz697ZdsJwJXIykERgnyqVw4UA\",\n    authDomain: \"theeco-react.firebaseapp.com\",\n    databaseURL: \"https://theeco-react.firebaseio.com\",\n    projectId: \"theeco-react\",\n    storageBucket: \"theeco-react.appspot.com\",\n    messagingSenderId: \"467260015885\",\n    appId: \"1:467260015885:web:b7c30997f9d38b37855c44\",\n    measurementId: \"G-HP2BZSHBZ8\"\n  };\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;","import React from 'react';\nimport { Grid, Header, Icon, Image, Dropdown } from 'semantic-ui-react';\nimport { connect } from \"react-redux\";\nimport firebase from '../../../server/firebase';\n\nimport \"./Userinfo.css\";\n\nconst UserInfo = (props) => {\n\n\n    const getDropDownOptions = () => {\n        return [{\n            key: 'signout',\n            text: <span onClick={signOut} >Sign Out</span>\n        }]\n    }\n\n    const signOut = () => {\n        firebase.auth()\n            .signOut()\n            .then(() => console.log(\"user signed out\"));\n    }\n\n    if (props.user) {\n        return (<Grid>\n            <Grid.Column>\n                <Grid.Row className=\"userinfo_grid_row\">\n                    <Header inverted as=\"h2\">\n                        <Icon name=\"envira gallery\" />\n                        <Header.Content>The Eco</Header.Content>\n                    </Header>\n                    <Header className=\"userinfo_displayname\" inverted as=\"h4\">\n                        <Dropdown\n                            trigger={\n                                <span>\n                                    <Image src={props.user.photoURL} avatar></Image>\n                                    {props.user.displayName}\n                                </span>\n                            }\n                            options={getDropDownOptions()}\n                        >\n                        </Dropdown>\n\n                    </Header>\n                </Grid.Row>\n            </Grid.Column>\n        </Grid>)\n    }\n    return null;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser\n    }\n}\n\nexport default connect(mapStateToProps)(UserInfo);"," \nimport { SET_USER, SET_CHANNEL ,SET_FAVOURITECHANNEL,REMOVE_FAVOURITECHANNEL} from './actiontypes';\n\nexport const setUser = (user) => {\n    return {\n        type: SET_USER,\n        payload: {\n            currentUser: user\n        }\n    }\n}\n\nexport const setChannel = (channel) => {\n    return {\n        type: SET_CHANNEL,\n        payload: {\n            currentChannel: channel\n        }\n    }\n}\n\nexport const setfavouriteChannel = (channel) => {\n    return {\n        type: SET_FAVOURITECHANNEL,\n        payload: {\n            favouriteChannel: channel\n        }\n    }\n}\n\nexport const removefavouriteChannel = (channel) => {\n    return {\n        type: REMOVE_FAVOURITECHANNEL,\n        payload: {\n            favouriteChannel: channel\n        }\n    }\n}","export const SET_USER = 'SET_USER'\n\nexport const SET_CHANNEL = 'SET_CHANNEL'\n\nexport const SET_FAVOURITECHANNEL = 'SET_FAVOURITECHANNEL'\n\nexport const REMOVE_FAVOURITECHANNEL = 'REMOVE_FAVOURITECHANNEL'","import React, { useState, useEffect } from 'react';\nimport { Label } from 'semantic-ui-react';\n\nimport firebase from \"../../../server/firebase\";\n\nexport const Notification = (props) => {\n\n    const messagesRef = firebase.database().ref(\"messages\");\n\n    const usersRef = firebase.database().ref(\"users\");\n\n    const [channelsVisitedState, setChannelsVisitedState] = useState({});\n\n\n    const [messagesTimeStampState, setMessagesTimeStampState] = useState({});\n\n\n    useEffect(() => {\n\n        if (props.user) {\n            usersRef.child(props.user.uid).child('lastVisited').on('value', snap => {\n                setChannelsVisitedState(snap.val());\n            })\n\n            messagesRef.on('value', snap => {\n                let messages = snap.val();\n\n                let channelsId = Object.keys(messages);\n                let messagesTimeStamp = {};\n                channelsId.forEach((channelId) => {\n                    let channelMessageKeys = Object.keys(messages[channelId]);\n                    channelMessageKeys.reduce((agg, item) => {\n                        messagesTimeStamp[channelId] = [...messagesTimeStamp[channelId] || []];\n                        messagesTimeStamp[channelId].push(messages[channelId][item].timestamp);\n                    })\n                })\n                setMessagesTimeStampState(messagesTimeStamp);\n            })\n        }\n    }, [props.user]);\n\n    const calculateNotificationCount = (channelId) => {\n\n        if (channelsVisitedState && messagesTimeStampState && props.channel && props.channel.id !== channelId) {\n\n            let lastVisited = channelsVisitedState[channelId];\n\n            let channelMessagesTimeStamp = messagesTimeStampState[channelId];\n\n            if (channelMessagesTimeStamp) {\n                let notificationCount = channelMessagesTimeStamp.filter(timestamp => !lastVisited || lastVisited < timestamp).length;\n                return notificationCount === 0 ? null : <Label color=\"red\">{notificationCount}</Label>\n            }\n        }\n\n        return null;\n    }\n\n    return <> {props.displayName}{calculateNotificationCount(props.notificationChannelId)} </>;\n\n}","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\"\nimport { Notification } from \"../Notification/Notification.component\";\n\nimport './Channels.css';\nimport { Menu, Icon, Modal, Button, Form, Segment } from 'semantic-ui-react';\n\nconst Channels = (props) => {\n    const [modalOpenState, setModalOpenState] = useState(false);\n    const [channelAddState, setChannelAddState] = useState({ name: '', description: '' });\n    const [isLoadingState, setLoadingState] = useState(false);\n    const [channelsState, setChannelsState] = useState([]);\n\n    const channelsRef = firebase.database().ref(\"channels\");\n    const usersRef = firebase.database().ref(\"users\");\n\n    useEffect(() => {\n        channelsRef.on('child_added', (snap) => {\n            setChannelsState((currentState) => {\n                let updatedState = [...currentState];\n                updatedState.push(snap.val());               \n                return updatedState;\n            })\n        });\n\n        return () => channelsRef.off();\n    }, [])\n\n    useEffect(()=> {\n        if (channelsState.length > 0) {\n            props.selectChannel(channelsState[0])\n        }\n    },[!props.channel ?channelsState : null ])\n\n    const openModal = () => {\n        setModalOpenState(true);\n    }\n\n    const closeModal = () => {\n        setModalOpenState(false);\n    }\n\n    const checkIfFormValid = () => {\n        return channelAddState && channelAddState.name && channelAddState.description;\n    }\n\n    const displayChannels = () => {\n        if (channelsState.length > 0) {\n            return channelsState.map((channel) => {\n                return <Menu.Item\n                    key={channel.id}\n                    name={channel.name}\n                    onClick={() => selectChannel(channel)}\n                    active={props.channel && channel.id === props.channel.id && !props.channel.isFavourite}\n                >\n                      <Notification user={props.user} channel={props.channel}\n                        notificationChannelId={channel.id}\n                        displayName= {\"# \" + channel.name} />\n                   \n                </Menu.Item>\n            })\n        }\n    }\n\n    const selectChannel = (channel) => {\n        setLastVisited(props.user,props.channel);\n        setLastVisited(props.user,channel);\n        props.selectChannel(channel);\n    }\n\n    const setLastVisited = (user, channel) => {\n        const lastVisited = usersRef.child(user.uid).child(\"lastVisited\").child(channel.id);\n        lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n        lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n    }\n\n    const onSubmit = () => {\n\n        if (!checkIfFormValid()) {\n            return;\n        }\n\n        const key = channelsRef.push().key;\n\n        const channel = {\n            id: key,\n            name: channelAddState.name,\n            description: channelAddState.description,\n            created_by: {\n                name: props.user.displayName,\n                avatar: props.user.photoURL\n            }\n        }\n        setLoadingState(true);\n        channelsRef.child(key)\n            .update(channel)\n            .then(() => {\n                setChannelAddState({ name: '', description: '' });\n                setLoadingState(false);\n                closeModal();\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    const handleInput = (e) => {\n\n        let target = e.target;\n        setChannelAddState((currentState) => {\n            let updatedState = { ...currentState };\n            updatedState[target.name] = target.value;\n            return updatedState;\n        })\n    }\n\n    return <> <Menu.Menu style={{ marginTop: '35px' }}>\n        <Menu.Item style={{fontSize : '17px'}}>\n            <span>\n                <Icon name=\"exchange\" /> Channels\n            </span>\n            ({channelsState.length})\n        </Menu.Item>\n        {displayChannels()}\n        <Menu.Item>\n            <span className=\"clickable\" onClick={openModal} >\n                <Icon name=\"add\" /> ADD\n            </span>\n        </Menu.Item>\n    </Menu.Menu>\n        <Modal open={modalOpenState} onClose={closeModal}>\n            <Modal.Header>\n                Create Channel\n            </Modal.Header>\n            <Modal.Content>\n                <Form onSubmit={onSubmit}>\n                    <Segment stacked>\n                        <Form.Input\n                            name=\"name\"\n                            value={channelAddState.name}\n                            onChange={handleInput}\n                            type=\"text\"\n                            placeholder=\"Enter Channel Name\"\n                        />\n                        <Form.Input\n                            name=\"description\"\n                            value={channelAddState.description}\n                            onChange={handleInput}\n                            type=\"text\"\n                            placeholder=\"Enter Channel Description\"\n                        />\n                    </Segment>\n                </Form>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button loading={isLoadingState} onClick={onSubmit}>\n                    <Icon name=\"checkmark\" /> Save\n                </Button>\n                <Button onClick={closeModal}>\n                    <Icon name=\"remove\" /> Cancel\n                </Button>\n            </Modal.Actions>\n        </Modal>\n    </>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser,\n        channel: state.channel.currentChannel\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectChannel: (channel) => dispatch(setChannel(channel))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Channels);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\"\nimport { Notification } from \"../Notification/Notification.component\";\n\nimport { Menu, Icon } from 'semantic-ui-react';\n\nconst PrivateChat = (props) => {\n\n    const [usersState, setUsersState] = useState([]);\n\n    const [connectedUsersState, setConnectedUsersState] = useState([]);\n\n    const usersRef = firebase.database().ref(\"users\");\n\n    const connectedRef = firebase.database().ref(\".info/connected\");\n\n    const statusRef = firebase.database().ref(\"status\");\n\n    useEffect(() => {\n        usersRef.on('child_added', (snap) => {\n            setUsersState((currentState) => {\n                let updatedState = [...currentState];\n\n                let user = snap.val();\n                user.name = user.displayName;\n                user.id = snap.key;\n                user.isPrivateChat = true;\n                updatedState.push(user);\n\n                return updatedState;\n            })\n        });\n\n        connectedRef.on(\"value\", snap => {\n            if (props.user && snap.val()) {\n                const userStatusRef = statusRef.child(props.user.uid);\n                userStatusRef.set(true);\n                userStatusRef.onDisconnect().remove();\n            }\n        })\n\n        return () => { usersRef.off(); connectedRef.off(); }\n    }, [props.user])\n\n    useEffect(() => {\n\n        statusRef.on(\"child_added\", snap => {\n            setConnectedUsersState((currentState) => {\n                let updatedState = [...currentState];\n                updatedState.push(snap.key);\n                return updatedState;\n            })\n        });\n\n        statusRef.on(\"child_removed\", snap => {\n            setConnectedUsersState((currentState) => {\n                let updatedState = [...currentState];\n\n                let index = updatedState.indexOf(snap.key);\n                updatedState.splice(index, 1);\n                return updatedState;\n            })\n        });\n\n        return () => statusRef.off();\n    }, [usersState]);\n\n    const displayUsers = () => {\n        if (usersState.length > 0) {\n            return usersState.filter((user) => user.id !== props.user.uid).map((user) => {\n                return <Menu.Item\n                    key={user.id}\n                    name={user.name}\n                    onClick={() => selectUser(user)}\n                    active={props.channel && generateChannelId(user.id) === props.channel.id}\n                >\n                    <Icon name=\"circle\" color={`${connectedUsersState.indexOf(user.id) !== -1 ? \"green\" : \"red\"}`} />\n\n                    <Notification user={props.user} channel={props.channel}\n                        notificationChannelId={generateChannelId(user.id)}\n                        displayName={\"@ \" + user.name} />\n                        \n                </Menu.Item>\n            })\n        }\n    }\n\n    const selectUser = (user) => {\n        let userTemp = { ...user };\n        userTemp.id = generateChannelId(user.id);\n        setLastVisited(props.user, props.channel);\n        setLastVisited(props.user, userTemp);\n        props.selectChannel(userTemp);\n    }\n\n    const setLastVisited = (user, channel) => {\n        const lastVisited = usersRef.child(user.uid).child(\"lastVisited\").child(channel.id);\n        lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n        lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n    }\n\n    const generateChannelId = (userId) => {\n        if (props.user.uid < userId) {\n            return props.user.uid + userId;\n        }\n        else {\n            return userId + props.user.uid;\n        }\n    }\n\n    return <Menu.Menu style={{ marginTop: '35px' }}>\n        <Menu.Item style={{ fontSize: '17px' }}>\n            <span>\n                <Icon name=\"mail\" /> Chat\n            </span>\n            ({usersState.length - 1})\n        </Menu.Item>\n        {displayUsers()}\n    </Menu.Menu>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser,\n        channel: state.channel.currentChannel\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectChannel: (channel) => dispatch(setChannel(channel))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setChannel } from \"../../../store/actioncreator\"\n\nimport { Menu, Icon } from 'semantic-ui-react';\n\nconst FavouriteChannels = (props) => {\n\n    const displayChannels = () => {\n        if (Object.keys(props.favouriteChannels).length > 0) {\n            return Object.keys(props.favouriteChannels).map((channelId) => {\n                return <Menu.Item\n                    key={channelId}\n                    name={props.favouriteChannels[channelId]}\n                    onClick={() => props.selectChannel({ id: channelId, name: props.favouriteChannels[channelId] , isFavourite : true })}\n                    active={props.channel && channelId === props.channel.id && props.channel.isFavourite}\n                >\n                    {\"# \" + props.favouriteChannels[channelId]}\n                </Menu.Item>\n            })\n        }\n    } \n\n    return <Menu.Menu >\n        <Menu.Item style={{ fontSize: '17px' }}>\n            <span>\n                <Icon name=\"star\" /> Starred\n            </span>\n            ({Object.keys(props.favouriteChannels).length})\n        </Menu.Item>\n        {displayChannels()}\n    </Menu.Menu>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        channel: state.channel.currentChannel,\n        favouriteChannels: state.favouriteChannel.favouriteChannel\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectChannel: (channel) => dispatch(setChannel(channel))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FavouriteChannels);","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport UserInfo from './UserInfo/Userinfo.component';\nimport Channels from \"./Channels/Channels.component\";\nimport PrivateChat from \"./PrivateChat/PrivateChat.component\"\nimport FavouriteChannels from \"./FavouriteChannels/FavouriteChannels.component\";\n\nimport \"./SideBar.css\";\n\nexport const SideBar = () => {\n    return (<Menu vertical fixed=\"left\" borderless size=\"large\" className=\"side_bar\">\n        <UserInfo />\n        <FavouriteChannels />\n        <Channels />\n        <PrivateChat />\n    </Menu>\n    )\n}","import React from 'react';\nimport { Segment, Header, Input, Icon } from 'semantic-ui-react';\n\nconst MessageHeader = (props) => {\n    return <Segment clearing>\n        <Header floated=\"left\" fluid=\"true\" as=\"h2\">\n            <span>\n                {(props.isPrivateChat ? \"@ \" : \"# \") + props.channelName}\n                {!props.isPrivateChat && <Icon\n                    onClick={props.starChange}\n                    name={props.starred ? \"star\" : \"star outline\"}\n                    color={props.starred ? \"yellow\" : \"black\"} />}\n            </span>\n            <Header.Subheader> {props.uniqueUsers} User{props.uniqueUsers === 1 ? \"\" : \"s\"}</Header.Subheader>\n        </Header>\n        <Header floated=\"right\">\n            <Input\n                name=\"search\"\n                icon=\"search\"\n                placeholder=\"Search Messages\"\n                size=\"mini\"\n                onChange={props.searchTermChange}\n            />\n        </Header>\n\n    </Segment>\n}\n\nexport default MessageHeader;","import React from 'react';\nimport { Comment,Image } from \"semantic-ui-react\";\nimport TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\n\nimport \"./MessageContent.css\";\n\nTimeAgo.locale(en);\n\nconst timeAgo = new TimeAgo();\n\nconst MessageContent = (props) => {\n    return <Comment>\n        <Comment.Avatar src={props.message.user.avatar} />\n        <Comment.Content className={props.ownMessage ? \"ownMessage\" : null}>\n            <Comment.Author as=\"a\">{props.message.user.name}</Comment.Author>\n            <Comment.Metadata>{timeAgo.format(props.message.timestamp)}</Comment.Metadata>\n            {props.message.image ? <Image onLoad={props.imageLoaded} src={props.message.image} /> :\n                <Comment.Text>{props.message.content}</Comment.Text>\n            }\n        </Comment.Content>\n    </Comment>\n}\n\nexport default MessageContent;","import React, { useState } from 'react';\nimport { Input, Modal, Button, Icon } from 'semantic-ui-react';\nimport mime from \"mime-types\"\n\nexport const ImageUpload = (props) => {\n\n    const [fileState, setFileState] = useState(null);\n\n    const acceptedTypes = [\"image/png\", \"image/jpeg\"]\n\n    const onFileAdded = (e) => {\n        const file = e.target.files[0];\n        if (file) {\n            setFileState(file);\n        }\n    }\n\n    const submit = () => {\n        if (fileState && acceptedTypes.includes(mime.lookup(fileState.name))) {\n            props.uploadImage(fileState, mime.lookup(fileState.name));\n            props.onClose();\n            setFileState(null);\n        }\n    }\n\n    return (<Modal basic open={props.open} onClose={props.onClose}>\n        <Modal.Header>Select a image</Modal.Header>\n        <Modal.Content>\n            <Input\n                type=\"file\"\n                name=\"file\"\n                onChange={onFileAdded}\n                fluid\n                label=\"File Type (png , jpeg)\"\n            />\n        </Modal.Content>\n        <Modal.Actions>\n            <Button color=\"green\" onClick={submit}>\n                <Icon name=\"checkmark\" />Add\n            </Button>\n            <Button color=\"red\" onClick={props.onClose}>\n                <Icon name=\"remove\" />Cancel\n            </Button>\n        </Modal.Actions>\n    </Modal>)\n}","import React, { useState } from 'react';\nimport { Segment, Input, Button } from \"semantic-ui-react\";\nimport firebase from \"../../../server/firebase\";\nimport { connect } from \"react-redux\";\nimport { ImageUpload } from \"../ImageUpload/ImageUpload.component\"\nimport { v4 as uuidv4 } from 'uuid';\n\nconst MessageInput = (props) => {\n\n    const messageRef = firebase.database().ref('messages');\n\n    const storageRef = firebase.storage().ref();\n\n    const [messageState, setMessageState] = useState(\"\");\n\n    const [fileDialogState, setFileDialog] = useState(false);\n\n    const createMessageInfo = (downloadUrl) => {\n        return {\n            user: {\n                avatar: props.user.photoURL,\n                name: props.user.displayName,\n                id: props.user.uid\n            },\n            content: messageState,\n            image : downloadUrl || \"\",\n            timestamp: firebase.database.ServerValue.TIMESTAMP\n        }\n    }\n\n    const sendMessage = (downloadUrl) => {\n        if (messageState || downloadUrl) {\n            messageRef.child(props.channel.id)\n                .push()\n                .set(createMessageInfo(downloadUrl))\n                .then(() => setMessageState(\"\"))\n                .catch((err) => console.log(err))\n        }\n    }\n\n    const onMessageChange = (e) => {\n        const target = e.target;\n        setMessageState(target.value);\n    }\n\n    const createActionButtons = () => {\n        return <>\n            <Button icon=\"send\" onClick={() => {sendMessage() }} />\n            <Button icon=\"upload\" onClick={() => setFileDialog(true)} />\n        </>\n    }\n\n    const uploadImage = (file, contentType) => {\n\n        const filePath = `chat/images/${uuidv4()}.jpg`;\n\n        storageRef.child(filePath).put(file, { contentType: contentType })\n            .then((data) => {\n                data.ref.getDownloadURL()\n                .then((url) => {\n                    sendMessage(url);\n                })\n                .catch((err) => console.log(err));\n            })\n            .catch((err) => console.log(err));\n    }\n\n    return <Segment>\n        <Input\n            onChange={onMessageChange}\n            fluid={true}\n            name=\"message\"\n            value={messageState}\n            label={createActionButtons()}\n            labelPosition=\"right\"\n        />\n        <ImageUpload uploadImage={uploadImage} open={fileDialogState} onClose={() => setFileDialog(false)} />\n    </Segment>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser,\n        channel: state.channel.currentChannel\n    }\n}\n\nexport default connect(mapStateToProps)(MessageInput);","import React, { useEffect, useState,useRef } from 'react';\n\nimport MessageHeader from './MessageHeader/MessageHeader.component';\nimport MessageContent from \"./MessageContent/MessageContent.component\";\nimport MessageInput from \"./MessageInput/MessageInput.component\";\nimport { connect } from \"react-redux\";\nimport { setfavouriteChannel, removefavouriteChannel } from \"../../store/actioncreator\";\nimport firebase from \"../../server/firebase\";\nimport { Segment, Comment } from 'semantic-ui-react';\nimport \"./Messages.css\"; \n\nconst Messages = (props) => {\n\n    const messageRef = firebase.database().ref('messages');\n\n    const usersRef = firebase.database().ref('users');\n\n    const [messagesState, setMessagesState] = useState([]);\n\n    const [searchTermState, setSearchTermState] = useState(\"\");\n\n    let divRef = useRef();\n\n    useEffect(() => {\n        if (props.channel) {\n            setMessagesState([]);\n            messageRef.child(props.channel.id).on('child_added', (snap) => {\n                setMessagesState((currentState) => {\n                    let updatedState = [...currentState];\n                    updatedState.push(snap.val());\n                    return updatedState;\n                })\n            })\n\n            return () => messageRef.child(props.channel.id).off();\n        }\n    }, [props.channel])\n\n    useEffect(() => {\n\n        if (props.user) {\n            usersRef.child(props.user.uid).child(\"favourite\")\n                .on('child_added', (snap) => {\n                    props.setfavouriteChannel(snap.val());\n                })\n\n            usersRef.child(props.user.uid).child(\"favourite\")\n                .on('child_removed', (snap) => {\n                    props.removefavouriteChannel(snap.val());\n                })\n\n            return () => usersRef.child(props.user.uid).child(\"favourite\").off();\n        }\n    }, [props.user])\n\n    useEffect(()=> {\n        divRef.scrollIntoView({behavior : 'smooth'});\n    },[messagesState])\n\n    const displayMessages = () => {\n        let messagesToDisplay = searchTermState ? filterMessageBySearchTerm() : messagesState;\n        if (messagesToDisplay.length > 0) {\n            return messagesToDisplay.map((message) => {\n                return <MessageContent imageLoaded={imageLoaded} ownMessage={message.user.id === props.user.uid} key={message.timestamp} message={message} />\n            })\n        }\n    }\n\n    const imageLoaded= () => {\n        divRef.scrollIntoView({behavior : 'smooth'});\n    }\n\n    const uniqueusersCount = () => {\n        const uniqueUsers = messagesState.reduce((acc, message) => {\n            if (!acc.includes(message.user.name)) {\n                acc.push(message.user.name);\n            }\n            return acc;\n        }, []);\n\n        return uniqueUsers.length;\n    }\n\n    const searchTermChange = (e) => {\n        const target = e.target;\n        setSearchTermState(target.value);\n    }\n\n    const filterMessageBySearchTerm = () => {\n        const regex = new RegExp(searchTermState, \"gi\");\n        const messages = messagesState.reduce((acc, message) => {\n            if ((message.content && message.content.match(regex)) || message.user.name.match(regex)) {\n                acc.push(message);\n            }\n            return acc;\n        }, []);\n\n        return messages;\n    }\n\n    const starChange = () => {\n        let favouriteRef = usersRef.child(props.user.uid).child(\"favourite\").child(props.channel.id);\n        if (isStarred()) {\n            favouriteRef.remove();\n        } else {\n            favouriteRef.set({ channelId: props.channel.id, channelName: props.channel.name })\n        }\n    }\n\n    const isStarred = () => {\n        return Object.keys(props.favouriteChannels).includes(props.channel?.id);\n    }\n\n    return <div className=\"messages\"><MessageHeader starChange={starChange} starred={isStarred()} isPrivateChat={props.channel?.isPrivateChat} searchTermChange={searchTermChange} channelName={props.channel?.name} uniqueUsers={uniqueusersCount()} />\n        <Segment className=\"messagecontent\">\n            <Comment.Group>\n                {displayMessages()}\n                <div ref={currentEl => divRef = currentEl}></div>\n            </Comment.Group>\n        </Segment>\n        <MessageInput /></div>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        channel: state.channel.currentChannel,\n        user: state.user.currentUser,\n        favouriteChannels: state.favouriteChannel.favouriteChannel\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setfavouriteChannel: (channel) => dispatch(setfavouriteChannel(channel)),\n        removefavouriteChannel: (channel) => dispatch(removefavouriteChannel(channel)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);","import React from 'react';\n\nimport \"./Ads.css\"\n\nconst Ads = (props) => {\n    return <div className=\"adsBox\">\n        \n        <div className=\"banner\">Banner ad</div>\n        <div className=\"banner\">Banner ad</div>\n        <div className=\"banner\">Banner ad</div>\n        \n    </div>\n}\n\nexport default Ads;","import React from 'react';\nimport './App.css';\nimport { SideBar } from \"./components/SideBar/SideBar.component\";\nimport Messages from \"./components/Messages/Messages.component\"\nimport Ads from \"./components/Ads/Ads.component\"\n\n\nfunction App() {\n  return (\n    <div>\n      <SideBar />\n      <div style={{paddingLeft : '300px'}}>\n        <Messages />\n        <Ads />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\nimport { Grid, Form, Segment, Header, Icon, Button, Message } from 'semantic-ui-react'\nimport firebase from '../../../server/firebase'\n\nimport \"../Auth.css\"\nimport { Link } from 'react-router-dom';\n\nconst Register = () => {\n\n    let user = {\n        userName: '',\n        email: '',\n        password: '',\n        confirmpassword: ''\n    }\n\n    let errors = [];\n\n    let userCollectionRef = firebase.database().ref('users');\n\n    const [userState, setuserState] = useState(user);\n    const [errorState, seterrorState] = useState(errors);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSuccess, setIsSuccess] = useState(false);\n\n    const handleInput = (event) => {\n        let target = event.target;\n        setuserState((currentState) => {\n            let currentuser = { ...currentState };\n            currentuser[target.name] = target.value;\n            return currentuser;\n        })\n    }\n\n    const checkForm = () => {\n        if (isFormEmpty()) {\n            seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\n            return false;\n        }\n        else if (!checkPassword()) {\n            return false;\n        }\n        return true;\n    }\n\n    const isFormEmpty = () => {\n        return !userState.userName.length ||\n            !userState.password.length ||\n            !userState.confirmpassword.length ||\n            !userState.email.length;\n    }\n\n    const checkPassword = () => {\n        if (userState.password.length < 6) {\n            seterrorState((error) => error.concat({ message: \"Password length should be greater than 6\" }));\n            return false;\n        }\n        else if (userState.password !== userState.confirmpassword) {\n            seterrorState((error) => error.concat({ message: \"Password and Confirm Password does not match\" }));\n            return false;\n        }\n        return true;\n    }\n\n    const onSubmit = (event) => {\n        seterrorState(() => []);\n        setIsSuccess(false);\n        if (checkForm()) {\n            setIsLoading(true);\n            firebase.auth()\n                .createUserWithEmailAndPassword(userState.email, userState.password)\n                .then(createdUser => {\n                    setIsLoading(false);\n                    updateuserDetails(createdUser);\n                })\n                .catch(serverError => {\n                    setIsLoading(false);\n                    seterrorState((error) => error.concat(serverError));\n                })\n\n        }\n    }\n\n    const updateuserDetails = (createdUser) => {\n        if (createdUser) {\n            setIsLoading(true);\n            createdUser.user\n                .updateProfile({\n                    displayName: userState.userName,\n                    photoURL: `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`\n                })\n                .then(() => {\n                    setIsLoading(false);\n                    saveUserInDB(createdUser);\n                })\n                .catch((serverError) => {\n                    setIsLoading(false);\n                    seterrorState((error) => error.concat(serverError));\n                })\n        }\n    }\n\n    const saveUserInDB = (createdUser) => {\n        setIsLoading(true);\n        userCollectionRef.child(createdUser.user.uid).set({\n            displayName: createdUser.user.displayName,\n            photoURL: createdUser.user.photoURL\n        })\n            .then(() => {\n                setIsLoading(false);\n                setIsSuccess(true);\n            })\n            .catch(serverError => {\n                setIsLoading(false);\n                seterrorState((error) => error.concat(serverError));\n            })\n    }\n\n    const formaterrors = () => {\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\n    }\n\n    return (<Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\" >\n        <Grid.Column style={{ maxWidth: '500px' }}>\n            <Header icon as=\"h2\">\n                <Icon name=\"envira gallery\" />\n                Register\n            </Header>\n            <Form onSubmit={onSubmit}>\n                <Segment stacked>\n                    <Form.Input\n                        name=\"userName\"\n                        value={userState.userName}\n                        icon=\"user\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"text\"\n                        placeholder=\"User Name\"\n                    />\n                    <Form.Input\n                        name=\"email\"\n                        value={userState.email}\n                        icon=\"mail\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"email\"\n                        placeholder=\"User Email\"\n                    />\n                    <Form.Input\n                        name=\"password\"\n                        value={userState.password}\n                        icon=\"lock\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"password\"\n                        placeholder=\"User Password\"\n                    />\n                    <Form.Input\n                        name=\"confirmpassword\"\n                        value={userState.confirmpassword}\n                        icon=\"lock\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"password\"\n                        placeholder=\"Confirm Password\"\n                    />\n                </Segment>\n                <Button disabled={isLoading} loading={isLoading}>Submit</Button>\n            </Form>\n            {errorState.length > 0 && <Message error>\n                <h3>Errors</h3>\n                {formaterrors()}\n            </Message>\n            }\n            {isSuccess && <Message success>\n                <h3>Successfully Registered</h3>\n            </Message>\n            }\n            <Message>\n                Already an User? <Link to=\"/login\" >Login </Link>\n            </Message>\n        </Grid.Column>\n    </Grid>)\n}\n\nexport default Register;","import React, { useState } from 'react';\nimport { Grid, Form, Segment, Header, Icon, Button, Message } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nimport firebase from '../../../server/firebase';\n\nimport \"../Auth.css\"\n\nconst Login = () => {\n\n    let user = {\n        email: '',\n        password: ''\n    }\n\n    let errors = [];\n\n    const [userState, setuserState] = useState(user);\n    const [isLoading, setIsLoading] = useState(false);\n    const [errorState, seterrorState] = useState(errors);\n\n    const handleInput = (event) => {\n        let target = event.target;\n        setuserState((currentState) => {\n            let currentuser = { ...currentState };\n            currentuser[target.name] = target.value;\n            return currentuser;\n        })\n    }\n\n    const checkForm = () => {\n        if (isFormEmpty()) {\n            seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\n            return false;\n        }\n        return true;\n    }\n\n    const isFormEmpty = () => {\n        return !userState.password.length ||\n            !userState.email.length;\n    }\n\n    const formaterrors = () => {\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\n    }\n\n    const onSubmit = (event) => {\n        seterrorState(() => []);\n        if (checkForm()) {\n            setIsLoading(true);\n            firebase.auth()\n                .signInWithEmailAndPassword(userState.email, userState.password)\n                .then(user => {\n                    setIsLoading(false);\n                    console.log(user);\n                })\n                .catch(serverError => {\n                    setIsLoading(false);\n                    seterrorState((error) => error.concat(serverError));\n                })\n\n        }\n    }\n\n    return <Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\" >\n        <Grid.Column style={{ maxWidth: '500px' }}>\n            <Header icon as=\"h2\">\n                <Icon name=\"envira gallery\" />\n                Welcome to The Eco<br/>\n                Login\n        </Header>\n            <Form onSubmit={onSubmit}>\n                <Segment stacked>\n                    <Form.Input\n                        name=\"email\"\n                        value={userState.email}\n                        icon=\"mail\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"email\"\n                        placeholder=\"User Email\"\n                    />\n                    <Form.Input\n                        name=\"password\"\n                        value={userState.password}\n                        icon=\"lock\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"password\"\n                        placeholder=\"User Password\"\n                    />\n                </Segment>\n                <Button disabled={isLoading} loading={isLoading}>Login</Button>\n            </Form>\n            {errorState.length > 0 && <Message error>\n                <h3>Errors</h3>\n                {formaterrors()}\n            </Message>\n            }\n            <Message>\n                Not an User? <Link to=\"/register\" >Register </Link>\n            </Message>\n        </Grid.Column>\n    </Grid>\n}\n\nexport default Login;","import { SET_USER, SET_CHANNEL, SET_FAVOURITECHANNEL, REMOVE_FAVOURITECHANNEL } from './actiontypes';\nimport { combineReducers } from \"redux\";\n\nlet defaultUserState = {\n    currentUser: null\n}\n\nconst userReducer = (state = defaultUserState, action) => {\n    if (action.type === SET_USER) {\n        let payload = action.payload;\n        state = { ...payload };\n        return state;\n    }\n    return state;\n}\n\nlet defaultChannelState = {\n    currentChannel: null,\n    loading : true\n}\n\n\nconst channelReducer = (state = defaultChannelState, action) => {\n    if (action.type === SET_CHANNEL) {\n        let payload = action.payload;\n        state = { ...payload };\n        state.loading= false;\n        return state;\n    }\n    return state;\n}\n\nlet defaultFavouriteChannelState = {\n    favouriteChannel: {}\n}\n\n\nconst favouriteChannelReducer = (state = defaultFavouriteChannelState, action) => {\n    if (action.type === SET_FAVOURITECHANNEL) {\n        let payload = action.payload.favouriteChannel;\n        let updatedState = { ...state.favouriteChannel };\n        updatedState[payload.channelId] = payload.channelName;\n        return { favouriteChannel: updatedState };\n    } else if (action.type === REMOVE_FAVOURITECHANNEL) {\n        let payload = action.payload.favouriteChannel;\n        let updatedState = { ...state.favouriteChannel };\n        delete updatedState[payload.channelId];\n        return { favouriteChannel: updatedState };\n    }\n    return state;\n}\n\nexport const combinedReducers = combineReducers({ user: userReducer, channel: channelReducer ,favouriteChannel : favouriteChannelReducer  })","import React from 'react';\n\nimport \"./AppLoader.css\"\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nexport const AppLoader = (props) => {\n    return (<Dimmer active={props.loading}>\n        <Loader size=\"huge\" content=\"Loading...\" />\n    </Dimmer>)\n}","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router,Switch,Route, withRouter} from \"react-router-dom\";\nimport { Provider, connect } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport Register from \"./components/Auth/Register/Register.component\";\nimport Login from \"./components/Auth/Login/Login.component\";\nimport firebase from \"./server/firebase\";\nimport { combinedReducers } from \"./store/reducer\";\nimport { setUser } from \"./store/actioncreator\"\nimport \"semantic-ui-css/semantic.min.css\"\nimport { AppLoader } from \"./components/AppLoader/AppLoader.component\";\n\nconst store = createStore(combinedReducers);\n\nconst Index = (props) => {\n\n   useEffect(() => {\n      firebase.auth().onAuthStateChanged((user) => {\n        if (user) {\n          props.setUser(user);\n          props.history.push(\"/\");\n        } else {\n          props.setUser(null);\n          props.history.push(\"/login\");\n        }\n      })\n    }, []);\n\n  console.log(\"Debug\", props.currentUser);\n\n  return (<>\n    <AppLoader loading={props.loading && props.location.pathname === \"/\"} />\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/\" component={App} />\n    </Switch></>)\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.user.currentUser,\n    loading: state.channel.loading\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setUser: (user) => { dispatch(setUser(user)) }\n  }\n}\nconst IndexWithRouter = withRouter(connect(mapStateToProps, mapDispatchToProps)(Index));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <IndexWithRouter />\n      </Router>\n    </Provider>\n    \n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}